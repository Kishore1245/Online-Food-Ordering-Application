package com.FOP.service;

import com.FOP.model.Order;
import com.FOP.model.PaymentResponse;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import jakarta.annotation.PostConstruct;

@Service
public class PaymentServiceImplementation implements PaymentService {
    
    @Value("${stripe.api.key}")
    private String stripeSecretKey;

    @PostConstruct
    public void init() {
        Stripe.apiKey = stripeSecretKey; // Set the Stripe API Key once
    }

    @Override
    public PaymentResponse generatePaymentLink(Order order) throws StripeException {
        
        SessionCreateParams params = SessionCreateParams.builder()
                .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
                .setMode(SessionCreateParams.Mode.PAYMENT)
                .setSuccessUrl("https://localhost:3000/payment/success/" + order.getId())
                .setCancelUrl("https://localhost:3000/cancel")
                .addLineItem(SessionCreateParams.LineItem.builder()
                        .setQuantity(1L)
                        .setPriceData(SessionCreateParams.LineItem.PriceData.builder()
                                .setCurrency("INR") // Corrected currency code
                                .setUnitAmount((long) order.getTotalAmount() * 100) // Convert amount to cents/paise
                                .setProductData(SessionCreateParams.LineItem.PriceData.ProductData.builder()
                                        .setName(order.getName()) // Use order name instead of hardcoded "pizza burger"
                                        .build())
                                .build())
                        .build())
                .build();

        Session session = Session.create(params);
        System.out.println("Session Created: " + session);

        PaymentResponse res = new PaymentResponse();
        res.setPayment_url(session.getUrl());

        return res;
    }

    @Override
    public PaymentResponse generatePaymentLink(Long orderId) {
        throw new UnsupportedOperationException("This method is not implemented yet.");
    }
}
